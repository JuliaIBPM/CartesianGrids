var documenterSearchIndex = {"docs":
[{"location":"manual/overview/#","page":"-","title":"-","text":"DocTestSetup = quote\n  using CartesianGrids\n  using Random\n  Random.seed!(1)\nend","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"using CartesianGrids\nusing Plots","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"In CartesianGrids, field data, such as velocity, vorticity and pressure, are stored on a staggered uniform grid. Such a grid is divided into cells, with edges (which, on a two-dimensional grid, are the same as faces) and nodes (cell centers). Nodes hold scalar-valued data. Edges, on the other hand, hold the components of vector-valued data that are normal to the respective edges; one component lies on the vertical edges, while the other is on the horizontal edges.","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"Furthermore, there are two different cell types: primal and dual. On the physical grid, these cell types are offset with respect to each other by half a cell spacing in each direction. In other words, the four corners of the primal (resp. dual) cell are the nodes of four dual (resp. primary) cells.","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"Thus, on a two-dimensional staggered grid, there are four distinct vector spaces, associated with where the data are held on the grid:","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"dual nodes,\ndual edges,\nprimal nodes, and\nprimal edges.","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"In CartesianGrids, these are each distinct data types. Furthermore, the relationships between these types are defined by an underlying grid shared by all. By convention, this grid is defined by the number of dual cells NX and NY in each direction; we will often refer to it as the dual grid. For example, Nodes{Dual,NX,NY} is the type for dual node data on this grid; Edges{Primal,NX,NY} is the type for edge data on the primal cells within this same NX by NY dual grid. Note that, even though this latter type is parameterized by NX and NY, these values do not correspond to the number of primal edges in each direction on this dual grid. These values always correspond to the number of dual cells on the grid, for any data type. This makes it clear the grid is shared by all data.","category":"page"},{"location":"manual/overview/#Setting-up-field-data-1","page":"-","title":"Setting up field data","text":"","category":"section"},{"location":"manual/overview/#","page":"-","title":"-","text":"Let's see an example of creating a blank set of dual node data and filling it with something:","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"w = Nodes(Dual,(5,4))\nw .= reshape(1:20,5,4)","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"Other data types on the same grid can be set up in similar fashion. To ensure that they have a size that is consistent with the dual node data w, we can use this in place of the size:","category":"page"},{"location":"manual/overview/#","page":"-","title":"-","text":"q = Edges(Primal,w);\nq.u[2,3] = 1;\nq","category":"page"},{"location":"manual/overview/#Index-1","page":"-","title":"Index","text":"","category":"section"},{"location":"manual/overview/#","page":"-","title":"-","text":"Pages = [\"overview.md\"]","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"DocTestSetup = quote\n  using CartesianGrids\n  using Random\n  Random.seed!(1)\nend","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"using CartesianGrids\nusing Plots","category":"page"},{"location":"manual/immersed/#The-grid-in-physical-space-1","page":"-","title":"The grid in physical space","text":"","category":"section"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Thus far, we have not had to consider the relationship between the grid's index space and some physical space. All of the operations thus far have acted on the entries in the discrete fields, based only on their relative indices, and not on their physical coordinates. In this section, we will discuss the relationship between the grid's index space and physical space, and then in the next section we'll discuss how we can transfer data between these spaces.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Generically, we can write the relationship between the physical coordinates x and y, and the indices i and j of any grid point as","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"x(i) = (i - Delta i - i_0)Delta x quad y(j) = (j - Delta j - j_0)Delta x","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"The scaling between these spaces is controlled by Delta x, which represents the uniform size of each grid cell; note that grid cells are presumed to be square in CartesianGrids. The indices I_0 = (i_0j_0) represent the location of the origin in the index space for primal nodes. Why primal nodes? Since the underlying grid is composed of dual cells, then primal nodes sit at the corners of the domain, so it is the most convenient for anchoring the grid to a specific point. But, since some field data of the same index are shifted by half a cell in one or both directions, then Delta i and Delta j are included for such purposes; these are either 0 or 12, depending on the field type. For example, for a primal node, Delta i = 0, so that x(i_0) = 0; for a dual node, Delta i = 12, so that x(i_0) = -Delta x2.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"In particular, for our four different data types and their components","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Primal nodes: Delta i = 0, Delta j = 0\nDual nodes: Delta i = 12, Delta j = 12\nPrimal edges u: Delta i = 12, Delta j = 0\nPrimal edges v: Delta i = 0, Delta j = 12\nDual edges u: Delta i = 0, Delta j = 12\nDual edges v: Delta i = 12, Delta j = 0","category":"page"},{"location":"manual/immersed/#Regularization-and-interpolation-1","page":"-","title":"Regularization and interpolation","text":"","category":"section"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Based on this relationship between the physical space and the index space, we can now construct a means of transferring data between a point (xy) in the physical space and the grid points in its immediate vicinity. We say that such a point is immersed in the grid. The process of transferring from the point to the  grid is called regularization, since we are effectively smearing this data over some extended neighborhood; the opposite operation, transferring grid field data to an arbitrary point, is  interpolation. In CartesianGrids, both operations are carried out with the discrete  delta function (DDF), which is a discrete analog of the Dirac delta function. The  DDF generally has compact support, so that  it only interacts with a small number of grid points in the vicinity of a  given physical location. Since each of the different field types reside at  slightly different locations, the range of indices invoked in this interaction  will be different for each field type.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Regularization can actually take different forms. It can be a simple point-wise interpolation, the discrete analog of simply multiplying by the Dirac delta function:","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"f_i delta(mathbfx - mathbfx_i)","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"to immerse a value f_i based at point mathbfx_i = (x_iy_i).","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Alternatively, regularization can be carried out over a curve mathbfX(s), the analog of","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"int f(s) delta(mathbfx - mathbfX(s))mathrmds","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"or it can be performed volumetrically, corresponding to","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"int f(mathbfy) delta(mathbfx - mathbfy)mathrmdmathbfy","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"In this case, the function f is distributed over some region of space. In each of these cases, the discrete version is simply a sum over data at a finite number of discrete points, and the type of regularization is specified by providing an optional argument specifying the arclength, area or volume associated with each discrete point. These arguments are used to weight the sum.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Let's see the regularization and interpolation in action. We will set up a ring  of 100 points on a circle of radius 14 centered at (1212). This curve-  type regularization will be weighted by the arclength, ds, associated with each  of the 100 points.  On these points, we will  set vector-valued data in which the x component is uniformly equal to 1.0,  while the y component is set equal to the vertical position relative to the  circle center. We will regularize these vector data to a primal  edge field on the grid in which these points are immersed.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"using CartesianGrids\nusing Plots\npyplot()","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"n = 100;\nθ = range(0,stop=2π,length=n+1);\nx = 0.5 .+ 0.25*cos.(θ[1:n]);\ny = 0.5 .+ 0.25*sin.(θ[1:n]);\nds = 2π/n*0.25;\nX = VectorData(x,y);","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"The variable X now holds the coordinates of the immersed points. Now we will set up the vector-valued data on these points","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"f = VectorData(X);\nfill!(f.u,1.0);\nf.v .= X.v.-0.5;","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Note that we have ensured that f has the correct dimensions by supplying the coordinate data X. This first step also initializes the data to zeros.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Now, let's set up the grid. The physical domain will be of size 10 times 10, and we will use 100 dual grid cells in each direction. Allowing a single layer of ghost cells surrounding the domain, we use 102 cells, and set the cell size to 0.01. Also, we will set the (xy) origin to coincide with the lower left corner of the domain.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"nx = 102; ny = 102;\nq = Edges(Primal,(nx,ny));\nLx = 1.0;\ndx = Lx/(nx-2)","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Now we set up the regularization operator. To set it up, it needs to know the coordinate data of the set of immersed points, the grid cell size, and the weight to apply to each immersed point. Since this is a regularization of a curve, this weight is the differential arc length ds associated with each point. (This last argument is supplied as a scalar, since it is uniform.)","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"H = Regularize(X,dx,weights=ds)","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"We have omitted some optional arguments. For example, it chooses a default DDF kernel (the 3rd-order Yang kernel Yang3); this can be changed with the ddftype argument. Also, the lower left corner, where we've set the origin, is the location of the (11) primal node; this is the default choice for I0 (the tuple I_0 of coordinates in index space discussed in the previous section).","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Now we can apply the regularization operator. We supply the target field q as the first argument and the source data f as the second argument.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"H(q,f);\nplot(q)\nsavefig(\"regq.svg\"); nothing # hide","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"We could also regularize this to a field of dual edges.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"p = Edges(Dual,(nx,ny));\nH(p,f);\nplot(p)\nsavefig(\"regp.svg\"); nothing # hide","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Scalar-valued data on the immersed points can only be regularized to nodal fields; the syntax is similar, and the regularization operator does not need to be reconstructed:","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"g = ScalarData(X);\nfill!(g,1.0);\nw = Nodes(Dual,(nx,ny));\nH(w,g);\nplot(w)\nsavefig(\"regw.svg\"); nothing # hide","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"For a given regularization operator, H, there is a companion interpolation operator, E. In CartesianGrids, this interpolation is also carried out with the same constructed operator, but with the arguments reversed: the grid field data are the source and the immersed points are the target. Note that interpolation is always a volumetric operation, so the weights assigned during the construction of the operator are not used in interpolation. Let's interpolate our regularized field back onto the immersed points.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"f2 = VectorData(X);\nH(f2,q);\nplot(f2.u,lab=\"u\")\nplot!(f2.v,lab=\"v\")\nsavefig(\"interpf.svg\"); nothing # hide","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Note that interpolation is not the inverse of regularization; we don't recover the original data when we regularize and then interpolate. However, there is generally a way to scale the quantities on the immersed points and on the grid so that H = E^T. If we want to force these operations to be transposes of each other, we can supply the issymmetric=true flag. This flag will override any supplied weights. But here, we will exclude it so that it defaults to the asymmetric form.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"H = Regularize(X,dx)","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"If we expect to carry out the regularization and interpolation a lot, then it is often sensible to construct matrix versions of these operators. This construction is sometimes a bit slow, but the resulting operators perform their operations much faster than the matrix-free operators described above. To generate these matrix operators, we have to supply the data types of the source and target of the operation. For example, for regularization from scalar field data to dual node data,","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"g = ScalarData(X);\nw = Nodes(Dual,(nx,ny));\nHmat = RegularizationMatrix(H,g,w);\nfill!(g,1.0);\nw .= Hmat*g;","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"In general, the interpolation matrix is separately constructed, and the source and target are reversed:","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Emat = InterpolationMatrix(H,w,g);\ng .= Emat*w;","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Alternatively, if the regularization and interpolation are symmetric, then we can get them both when we call for the regularization matrix:","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"H = Regularize(X,dx,issymmetric=true)\nHmat, Emat = RegularizationMatrix(H,g,w);","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"It might seem a bit funny to store them separately if they are just transposes of each other, but it is essential for the method dispatch that they are given separate types.","category":"page"},{"location":"manual/immersed/#Other-operations-with-point-type-data-1","page":"-","title":"Other operations with point-type data","text":"","category":"section"},{"location":"manual/immersed/#","page":"-","title":"-","text":"using CartesianGrids","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"We have seen point-type data structures, ScalarData and VectorData; there is also a tensor type of data, TensorData, which holds the four components of a 2x2 tensor. One can regularize and interpolate with this tensor data, as well; its companion grid data structure is the EdgeGradient type, which is a wrapper for four Nodes structures: two Dual, and two Primal, where the four tensor components are naturally held on the grid.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"There are also some extensions of standard operations to the VectorData type. For example, we can add a tuple of two numbers to vector data, and these numbers get added to each entry in the set of points, component-wise. For example,","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Y = VectorData(4)\nY + (1,2)","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Subtraction also works, and the operations are commutable.","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Another useful operation is a cross product, which can be carried out between a single scalar (treated as though it was the component of an out-of-plane vector) and VectorData:","category":"page"},{"location":"manual/immersed/#","page":"-","title":"-","text":"using LinearAlgebra\nX = VectorData(4)\nfill!(X.u,1)\n2.0×X","category":"page"},{"location":"manual/immersed/#Index-1","page":"-","title":"Index","text":"","category":"section"},{"location":"manual/immersed/#","page":"-","title":"-","text":"Pages = [\"immersed.md\"]","category":"page"},{"location":"manual/methods/#","page":"-","title":"-","text":"DocTestSetup = quote\n  using CartesianGrids\nend","category":"page"},{"location":"manual/methods/#Methods-1","page":"-","title":"Methods","text":"","category":"section"},{"location":"manual/methods/#","page":"-","title":"-","text":"Module  = [CartesianGrids]\nOrder   = [:type, :function]","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"DocTestSetup = quote\n  using CartesianGrids\n  using Random\n  Random.seed!(1)\nend","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"using CartesianGrids\nusing Plots","category":"page"},{"location":"manual/finitediff/#Field-differencing-operations-1","page":"-","title":"Field differencing operations","text":"","category":"section"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Field operations transform one data type to another. Some of these are differencing operations, analogous to differential counterparts in continuum calculus: curl, divergence, and gradient. For example, a curl operation can act upon dual nodal data (like streamfunction) and return primal edge data (i.e. velocity); a divergence operation acts on edge data (primal or dual) and returns nodal data of the same cell type. Note that these operations are mimetic: they maintain some of the same properties as the continuous counterparts. For example, the divergence of the curl of any dual nodal data is exactly zero. The curl of the gradient of primal nodal data is also zero.","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Let's take the curl of the dual nodal data we constructed:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"curl(w)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"We could also make this a little more cute by giving the curl operator a symbol and then acting upon the data as though it were a matrix-vector operation:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"C = Curl()\nC*w","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Note that C is not actually a matrix. Rather, it is simply another name for the curl operator, and * is defined in this context to apply curl to whatever is to the right of it. The other operators have similar constructs.","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Suppose we wish to apply the curl operation over and over. The curl() function allocates memory for the result whenever it is used; this would become expensive if it is done often. So it makes sense to preallocate space for this result and use the curl!() function, which simply fills in the elements:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"q = Edges(Primal,w)\ncurl!(q,w)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Note that we used a convenience function for setting up primal edge data q of a size that corresponds with w.","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Let's check that divergence of the curl is indeed zero:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"D = Divergence()\nD*(C*w)","category":"page"},{"location":"manual/finitediff/#The-Laplacian-and-its-inverse-1","page":"-","title":"The Laplacian and its inverse","text":"","category":"section"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"CartesianGrids also makes heavy use of the discrete Laplacian operator, L. This mimics the continuous operator, nabla^2, and acts upon data of any type. Let's apply this to the original data:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"laplacian(w)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"As with the other operators, we can also construct a shorthand of the discrete Laplacian operator,","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"L = plan_laplacian(size(w))\nL*w","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"An important part of CartesianGrids is the inverse of this operator. That is, we need the ability to solve the discrete Poisson system","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Ls = w","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"for s, for given data w. We achieve this in CartesianGrids with the lattice Green's function. To outfit the operator with its inverse, we simply set the optional flag:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"L = plan_laplacian(size(w),with_inverse=true)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Then, the Poisson system is solved with the backslash (\\),","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"s = L\\w\nL*s","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"It should be observed that the cells on the perimeter have not recovered the original values of w. These are the ghost cells, and the Laplacian operation does not apply to these.","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"It is also important to note that, although it looks as though we've constructed a matrix L and performed various matrix-vector operations with it, this is not actually the case. In fact, the \\ operation associated with L is significantly faster than a matrix inversion. Internally, it carries out a fast convolution between the data in w and the lattice Green's function, via fast Fourier transform. The lattice Green's function (LGF) table is pre-computed and pre-transformed in the original construction of L. (In fact, because this table is not dependent on the size of the grid, it is actually computed once for all time and stored in a file; subsequent applications of it just load it in and use the portion of it necessary for a certain grid.)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"The lattice Green's function has the advantage that it is independent of the grid size. Let's solve the Poisson system when w is a unit field, i.e. a field of zeros, except for a single 1 entry at one node. The solution s represents the influence of this point on all nodes. To see that the LGF does not depend on the grid size, let's use a grid that is long and skinny and plot the solution on it","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"w = Nodes(Dual,(50,10));\nw[20,5] = 1.0\nL = plan_laplacian(w,with_inverse=true)\nplot(L\\w)\nsavefig(\"Linvw.svg\"); nothing # hide","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"The influence is not affected by the narrow grid dimensions.","category":"page"},{"location":"manual/finitediff/#The-integrating-factor-1","page":"-","title":"The integrating factor","text":"","category":"section"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"An operator related to the lattice Green's function is the integrating factor. Suppose we have the system of ODEs","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"ddt u = L u + f(ut) quad u(0) = u_0","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"where L is the discrete Laplacian (on an infinite uniform grid), and u are nodal data (and f is a nodal-valued function acting on this nodal data). The exact solution of this problem is","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"u(t) = E(t)u_0 + int_0^t E(t-tau) f(u(tau)tau)mathrmdtau","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"where E(t) is the integrating factor (or matrix exponential) for the system. The easiest way to understand the role of E(t) is to consider its behavior when f is zero and u_0 contains a field of zeros except for a single 1 entry at one cell. Let's set up this initial data:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"u0 = Nodes(Dual,(100,100));\nu0[40,50] = 1.0\nplot(u0)\nsavefig(\"w1.svg\"); nothing # hide","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Then, E(t)u_0 diffuses this initial unit perturbation in each direction. Here, we apply it with t = 5:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"E = plan_intfact(5,u0)\nplot(E*u0)\nsavefig(\"Ew1.svg\"); nothing # hide","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Note that E(0) = I, where I is the identity. Also, the integrating factor has the useful property that E(t+tau) = E(t)E(tau). From these properties, it follows that E^-1(t) = E(-t). Let's suppose we wish to advance u from time t = tau-h to time t = tau. For any t in this interval, we can define an auxiliary quantity, v(ttau) = E(tau-t)u(t), which represents the instantaneous value of u, but diffused to the end of the time interval. This new quantity satisfies the modified set of ODEs","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"ddt v = E(tau-t) fleft E(t-tau) v(ttau)trightquad v(tau-htau) = E(h)u(tau-h)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"The result of integrating this set of ODEs to t = tau is v(tautau) = u(tau). In other words, the integrating factor allows us to solve a somewhat reduced set of ODEs.","category":"page"},{"location":"manual/finitediff/#Other-field-operations-1","page":"-","title":"Other field operations","text":"","category":"section"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Other field operations shift the data, by local averaging, from one data type to another. These operations are all called grid_interpolate!, and they require that the target data be preallocated. For example, to interpolate dual node data to the dual edges,","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"w = Nodes(Dual,(5,4));\nw .= reshape(1:20,5,4)\nWw = Edges(Dual,w);\ngrid_interpolate!(Ww,w)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Note that the edges in the ghost cells are 0; these edges are not assigned any values in the interpolate operation.","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"We can then interpolate this to primal edges:","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"q = Edges(Primal,w);\ngrid_interpolate!(q,Ww)","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"We can also compute the Hadamard (i.e. element by element) product of any data of the same type, e.g.,","category":"page"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"q∘q","category":"page"},{"location":"manual/finitediff/#Index-1","page":"-","title":"Index","text":"","category":"section"},{"location":"manual/finitediff/#","page":"-","title":"-","text":"Pages = [\"finitediff.md\"]","category":"page"},{"location":"#CartesianGrids.jl-1","page":"Home","title":"CartesianGrids.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"a framework for working with spatial fields discretized on or immersed in Cartesian grids","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The purpose of this package is to enable easy setup of and operations on spatial fields on 2-d uniform staggered Cartesian grids. Tools are provided for","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Constructing field data that lie in the different finite-dimensional spaces of the grid: the centers, corners, and edges of the cells\nPerforming discretely-mimetic differential calculus operations on these data, such as div, grad, curl, etc. These operations are carried out in a manner that transforms them between the spaces.\nSolving Poisson's equation on infinite grids using the lattice Green's function\nImmersing data on co-dimension one and two entities (points, curves) into the grid\nPerforming operations on these co-dimension data.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Many of the core aspects of the fluid-body interaction are based on the immersed boundary projection method, developed by Taira and Colonius [1].","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package works on Julia 1.0 and higher and is registered in the general Julia registry. To install, type","category":"page"},{"location":"#","page":"Home","title":"Home","text":"]add CartesianGrids","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Then type","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using CartesianGrids","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References-1","page":"Home","title":"References","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"[1]: Taira, K. and Colonius, T. (2007) \"The immersed boundary method: a projection approach,\" J. Comput. Phys., 225, 2118–2137.","category":"page"}]
}
